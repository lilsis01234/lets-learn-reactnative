{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport axios from \"axios\";\nimport { styles } from \"./LoginGabi.style\";\nimport { style } from \"../../Input/Input.style\";\nimport COLORS from \"../../../theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginPatientScreen = function LoginPatientScreen(_ref) {\n  var _ref2;\n  var navigation = _ref.navigation;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var handleLogin = function handleLogin() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.post(\"http://127.0.0.1:3000/auth/loginPatient\", {\n          email: email,\n          password: password\n        });\n        if (res.status === 200) {\n          console.log(\"Login Response Data:\", res.data);\n          localStorage.setItem('token', res.data.token);\n          localStorage.setItem('id', res.data.Id);\n          localStorage.setItem('etat', res.data.etat);\n          navigation.navigate(\"home\");\n        } else {\n          Alert.alert(\"Login Failed\", \"Invalid email or password\");\n        }\n      } catch (error) {\n        console.error(error);\n        Alert.alert(\"Error\", \"Login failed. Please try again later.\");\n      }\n    })).apply(this, arguments);\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Connexion Patient\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Votre email\",\n      onChangeText: function onChangeText(text) {\n        return setEmail(text);\n      }\n    }), _jsx(TextInput, {\n      style: styles.input,\n      secureTextEntry: true,\n      placeholder: \"Votre mot de passe\",\n      onChangeText: function onChangeText(text) {\n        return setPassword(text);\n      }\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleLogin,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Se connecter\"\n      })\n    })]\n  });\n};\nexport default LoginPatientScreen;\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    },\n    \"flex\": {\n      \"display\": \"flex\"\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  topics: {\n    \"container\": [\"width\"]\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","TouchableOpacity","StyleSheet","axios","styles","style","COLORS","jsx","_jsx","jsxs","_jsxs","LoginPatientScreen","_ref","_ref2","navigation","_useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","handleLogin","_asyncToGenerator","response","post","res","status","console","log","data","localStorage","setItem","token","Id","etat","navigate","Alert","alert","error","apply","arguments","container","children","title","input","placeholder","onChangeText","text","secureTextEntry","button","onPress","buttonText","_NativeWindStyleSheet","create","atRules","topics"],"sources":["C:/Users/Fabiola/Desktop/projet/front/components/Authentification/Login/LoginPatient.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { View, Text, TextInput, Button, TouchableOpacity, StyleSheet } from \"react-native\";\r\nimport axios from \"axios\";\r\nimport { styles } from \"./LoginGabi.style\";\r\nimport { style } from \"../../Input/Input.style\";\r\nimport COLORS from \"../../../theme\";\r\n\r\nconst LoginPatientScreen = ({ navigation }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const response = await axios.post(\"http://127.0.0.1:3000/auth/loginPatient\", {\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (res.status === 200) {\r\n        console.log(\"Login Response Data:\", res.data);\r\n\r\n        localStorage.setItem('token',res.data.token)\r\n        localStorage.setItem('id',res.data.Id)\r\n        localStorage.setItem('etat',res.data.etat)\r\n\r\n        navigation.navigate(\"home\");\r\n      } else {\r\n        Alert.alert(\"Login Failed\", \"Invalid email or password\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      Alert.alert(\"Error\", \"Login failed. Please try again later.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.title}>Connexion Patient</Text>\r\n      <TextInput\r\n        style={styles.input}\r\n        placeholder=\"Votre email\"\r\n        onChangeText={(text) => setEmail(text)}\r\n      />\r\n      <TextInput\r\n        style={styles.input}\r\n        secureTextEntry\r\n        placeholder=\"Votre mot de passe\"\r\n        onChangeText={(text) => setPassword(text)}\r\n      />\r\n      <TouchableOpacity\r\n        style={styles.button}\r\n        onPress={handleLogin}\r\n      >\r\n        <Text style={styles.buttonText}>Se connecter</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     backgroundColor: \"white\",\r\n//     justifyContent: \"center\",\r\n//     padding: 20,\r\n//   },\r\n//   title: {\r\n//     fontSize: 30,\r\n//     marginBottom: 20,\r\n//     textAlign: \"center\",\r\n//   },\r\n//   input: {\r\n//     padding: 10,\r\n//     backgroundColor: \"lightgray\",\r\n//     borderRadius: 10,\r\n//     marginBottom: 15,\r\n//   },\r\n//   button: {\r\n//     backgroundColor: \"#00bfa6\",\r\n//     borderRadius: 10,\r\n//     padding: 15,\r\n//     alignItems: \"center\",\r\n//   },\r\n//   buttonText: {\r\n//     color: \"white\",\r\n//     fontWeight: \"bold\",\r\n//     fontSize: 18,\r\n//   },\r\n// });\r\n\r\nexport default LoginPatientScreen;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAExC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM;AACf,SAASC,KAAK;AACd,OAAOC,MAAM;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAC,IAAA,EAAuB;EAAA,IAAAC,KAAA;EAAA,IAAjBC,UAAU,GAAAF,IAAA,CAAVE,UAAU;EACtC,IAAAC,SAAA,GAA0BnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA/BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EACtB,IAAAI,UAAA,GAAgCxB,QAAQ,CAAC,EAAE,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,WAAW,YAAXA,WAAWA,CAAA;IAAA,QAAAX,KAAA,GAAAA,KAAA,IAAAY,iBAAA,CAAG,aAAY;MAC9B,IAAI;QACF,IAAMC,QAAQ,SAASvB,KAAK,CAACwB,IAAI,CAAC,yCAAyC,EAAE;UAC3ET,KAAK,EAALA,KAAK;UACLI,QAAQ,EAARA;QACF,CAAC,CAAC;QAEF,IAAIM,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;UACtBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,GAAG,CAACI,IAAI,CAAC;UAE7CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACN,GAAG,CAACI,IAAI,CAACG,KAAK,CAAC;UAC5CF,YAAY,CAACC,OAAO,CAAC,IAAI,EAACN,GAAG,CAACI,IAAI,CAACI,EAAE,CAAC;UACtCH,YAAY,CAACC,OAAO,CAAC,MAAM,EAACN,GAAG,CAACI,IAAI,CAACK,IAAI,CAAC;UAE1CvB,UAAU,CAACwB,QAAQ,CAAC,MAAM,CAAC;QAC7B,CAAC,MAAM;UACLC,KAAK,CAACC,KAAK,CAAC,cAAc,EAAE,2BAA2B,CAAC;QAC1D;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAACA,KAAK,CAAC;QACpBF,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,uCAAuC,CAAC;MAC/D;IACF,CAAC,GAAAE,KAAA,OAAAC,SAAA;EAAA;EAED,OACEjC,KAAA,CAACb,IAAI;IAACQ,KAAK,EAAED,MAAM,CAACwC,SAAU;IAAAC,QAAA,GAC5BrC,IAAA,CAACV,IAAI;MAACO,KAAK,EAAED,MAAM,CAAC0C,KAAM;MAAAD,QAAA,EAAC;IAAiB,CAAM,CAAC,EACnDrC,IAAA,CAACT,SAAS;MACRM,KAAK,EAAED,MAAM,CAAC2C,KAAM;MACpBC,WAAW,EAAC,aAAa;MACzBC,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAK/B,QAAQ,CAAC+B,IAAI,CAAC;MAAA;IAAC,CACxC,CAAC,EACF1C,IAAA,CAACT,SAAS;MACRM,KAAK,EAAED,MAAM,CAAC2C,KAAM;MACpBI,eAAe;MACfH,WAAW,EAAC,oBAAoB;MAChCC,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAK3B,WAAW,CAAC2B,IAAI,CAAC;MAAA;IAAC,CAC3C,CAAC,EACF1C,IAAA,CAACP,gBAAgB;MACfI,KAAK,EAAED,MAAM,CAACgD,MAAO;MACrBC,OAAO,EAAE7B,WAAY;MAAAqB,QAAA,EAErBrC,IAAA,CAACV,IAAI;QAACO,KAAK,EAAED,MAAM,CAACkD,UAAW;QAAAT,QAAA,EAAC;MAAY,CAAM;IAAC,CACnC,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAiCD,eAAelC,kBAAkB;AAAC4C,qBAAA,CAAAC,MAAA;EAAApD,MAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;EAAA;EAAAqD,OAAA;IAAA;EAAA;EAAAC,MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}