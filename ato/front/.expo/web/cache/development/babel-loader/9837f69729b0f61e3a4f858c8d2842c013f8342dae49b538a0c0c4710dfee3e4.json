{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { connect } from 'react-redux';\nimport { addAnimal } from \"../Crud\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AddAnimalForm = function AddAnimalForm(_ref) {\n  var _ref2;\n  var dispatch = _ref.dispatch,\n    onClose = _ref.onClose;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    nom = _useState2[0],\n    setNom = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    type = _useState4[0],\n    setType = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    couleur = _useState6[0],\n    setCouleur = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    image = _useState8[0],\n    setImage = _useState8[1];\n  var pickImage = function pickImage() {\n    return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: false,\n        aspect: [4, 3],\n        quality: 1,\n        base64: true\n      });\n      if (!result.cancelled) {\n        setImage(result.base64);\n      }\n    })).apply(this, arguments);\n  };\n  var handleSubmit = function handleSubmit() {\n    dispatch(addAnimal(nom, type, couleur, image));\n    setNom('');\n    setType('');\n    setCouleur('');\n    setImage(null);\n    onClose();\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Nom\",\n      value: nom,\n      onChangeText: setNom\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Type\",\n      value: type,\n      onChangeText: setType\n    }), _jsx(TextInput, {\n      style: styles.input,\n      placeholder: \"Couleur\",\n      value: couleur,\n      onChangeText: setCouleur\n    }), _jsx(TouchableOpacity, {\n      style: styles.imageButton,\n      onPress: pickImage,\n      children: _jsx(Text, {\n        style: styles.imageButtonText,\n        children: \"S\\xE9lectionner une photo\"\n      })\n    }), image && _jsx(Image, {\n      source: {\n        uri: `data:image/png;base64,${image}`\n      },\n      style: styles.imagePreview\n    }), _jsx(TouchableOpacity, {\n      style: styles.editButton,\n      onPress: handleSubmit,\n      children: _jsx(Text, {\n        children: \"Ajouter\"\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: 'gray',\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10\n  },\n  imageButton: {\n    backgroundColor: 'lightblue',\n    padding: 10,\n    borderRadius: 5,\n    alignItems: 'center'\n  },\n  imageButtonText: {\n    color: 'white'\n  },\n  imagePreview: {\n    width: 100,\n    height: 100,\n    marginTop: 10,\n    borderRadius: 5\n  },\n  editButton: {\n    backgroundColor: 'orange',\n    borderRadius: 5,\n    padding: 10,\n    alignItems: 'center'\n  }\n});\nexport default connect()(AddAnimalForm);\n_NativeWindStyleSheet.create({\n  styles: {\n    \"container\": {\n      \"width\": \"100%\"\n    },\n    \"container@0\": {\n      \"maxWidth\": 640\n    },\n    \"container@1\": {\n      \"maxWidth\": 768\n    },\n    \"container@2\": {\n      \"maxWidth\": 1024\n    },\n    \"container@3\": {\n      \"maxWidth\": 1280\n    },\n    \"container@4\": {\n      \"maxWidth\": 1536\n    }\n  },\n  atRules: {\n    \"container\": [[[\"media\", \"(min-width: 640px)\"]], [[\"media\", \"(min-width: 768px)\"]], [[\"media\", \"(min-width: 1024px)\"]], [[\"media\", \"(min-width: 1280px)\"]], [[\"media\", \"(min-width: 1536px)\"]]]\n  },\n  topics: {\n    \"container\": [\"width\"]\n  }\n});","map":{"version":3,"names":["React","useState","View","TextInput","StyleSheet","TouchableOpacity","Text","Image","connect","addAnimal","ImagePicker","jsx","_jsx","jsxs","_jsxs","AddAnimalForm","_ref","_ref2","dispatch","onClose","_useState","_useState2","_slicedToArray","nom","setNom","_useState3","_useState4","type","setType","_useState5","_useState6","couleur","setCouleur","_useState7","_useState8","image","setImage","pickImage","_asyncToGenerator","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","base64","cancelled","apply","arguments","handleSubmit","style","styles","container","children","input","placeholder","value","onChangeText","imageButton","onPress","imageButtonText","source","uri","imagePreview","editButton","create","backgroundColor","padding","borderRadius","borderWidth","borderColor","marginBottom","alignItems","color","width","height","marginTop","_NativeWindStyleSheet","atRules","topics"],"sources":["C:/Users/Fabiola/Documents/front/components/Crud/Components/AddAnimalForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, TextInput, StyleSheet, TouchableOpacity, Text, Image } from 'react-native';\r\nimport { connect } from 'react-redux';\r\nimport { addAnimal } from '../Crud';\r\nimport * as ImagePicker from \"expo-image-picker\";\r\n\r\nconst AddAnimalForm = ({ dispatch, onClose }) => {\r\n  const [nom, setNom] = useState('');\r\n  const [type, setType] = useState('');\r\n  const [couleur, setCouleur] = useState('');\r\n  const [image, setImage] = useState(null); \r\n\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: false,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n      base64: true, \r\n    });\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.base64); // Store base64 string in state\r\n    }\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Dispatch action to store image in Redux\r\n    dispatch(addAnimal(nom, type, couleur, image));\r\n    \r\n    // Reset form state\r\n    setNom('');\r\n    setType('');\r\n    setCouleur('');\r\n    setImage(null); \r\n    onClose(); \r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TextInput style={styles.input} placeholder=\"Nom\" value={nom} onChangeText={setNom} />\r\n      <TextInput style={styles.input} placeholder=\"Type\" value={type} onChangeText={setType} />\r\n      <TextInput style={styles.input} placeholder=\"Couleur\" value={couleur} onChangeText={setCouleur} />\r\n      <TouchableOpacity style={styles.imageButton} onPress={pickImage}>\r\n        <Text style={styles.imageButtonText}>SÃ©lectionner une photo</Text>\r\n      </TouchableOpacity>\r\n      {image && (\r\n        <Image source={{ uri: `data:image/png;base64,${image}` }} style={styles.imagePreview} />\r\n      )}\r\n      <TouchableOpacity style={styles.editButton} onPress={handleSubmit}>\r\n        <Text>Ajouter</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: 'white',\r\n    padding: 20,\r\n    borderRadius: 10,\r\n  },\r\n  input: {\r\n    borderWidth: 1,\r\n    borderColor: 'gray',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 10,\r\n  },\r\n  imageButton: {\r\n    backgroundColor: 'lightblue',\r\n    padding: 10,\r\n    borderRadius: 5,\r\n    alignItems: 'center',\r\n  },\r\n  imageButtonText: {\r\n    color: 'white',\r\n  },\r\n  imagePreview: {\r\n    width: 100,\r\n    height: 100,\r\n    marginTop: 10,\r\n    borderRadius: 5,\r\n  },\r\n  editButton: {\r\n    backgroundColor: 'orange',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default connect()(AddAnimalForm);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAExC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,SAAS;AAClB,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjD,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA,EAA8B;EAAA,IAAAC,KAAA;EAAA,IAAxBC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;EACxC,IAAAC,SAAA,GAAsBnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA3BG,GAAG,GAAAF,UAAA;IAAEG,MAAM,GAAAH,UAAA;EAClB,IAAAI,UAAA,GAAwBxB,QAAQ,CAAC,EAAE,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA7BE,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EACpB,IAAAG,UAAA,GAA8B5B,QAAQ,CAAC,EAAE,CAAC;IAAA6B,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAAnCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EAC1B,IAAAG,UAAA,GAA0BhC,QAAQ,CAAC,IAAI,CAAC;IAAAiC,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAAjCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,SAAS,YAATA,SAASA,CAAA;IAAA,QAAApB,KAAA,GAAAA,KAAA,IAAAqB,iBAAA,CAAG,aAAY;MAC5B,IAAIC,MAAM,SAAS7B,WAAW,CAAC8B,uBAAuB,CAAC;QACrDC,UAAU,EAAE/B,WAAW,CAACgC,gBAAgB,CAACC,GAAG;QAC5CC,aAAa,EAAE,KAAK;QACpBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACdC,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,IAAI,CAACR,MAAM,CAACS,SAAS,EAAE;QACrBZ,QAAQ,CAACG,MAAM,CAACQ,MAAM,CAAC;MACzB;IACF,CAAC,GAAAE,KAAA,OAAAC,SAAA;EAAA;EAED,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IAEzBjC,QAAQ,CAACT,SAAS,CAACc,GAAG,EAAEI,IAAI,EAAEI,OAAO,EAAEI,KAAK,CAAC,CAAC;IAG9CX,MAAM,CAAC,EAAE,CAAC;IACVI,OAAO,CAAC,EAAE,CAAC;IACXI,UAAU,CAAC,EAAE,CAAC;IACdI,QAAQ,CAAC,IAAI,CAAC;IACdjB,OAAO,CAAC,CAAC;EACX,CAAC;EAED,OACEL,KAAA,CAACZ,IAAI;IAACkD,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5B3C,IAAA,CAACT,SAAS;MAACiD,KAAK,EAAEC,MAAM,CAACG,KAAM;MAACC,WAAW,EAAC,KAAK;MAACC,KAAK,EAAEnC,GAAI;MAACoC,YAAY,EAAEnC;IAAO,CAAE,CAAC,EACtFZ,IAAA,CAACT,SAAS;MAACiD,KAAK,EAAEC,MAAM,CAACG,KAAM;MAACC,WAAW,EAAC,MAAM;MAACC,KAAK,EAAE/B,IAAK;MAACgC,YAAY,EAAE/B;IAAQ,CAAE,CAAC,EACzFhB,IAAA,CAACT,SAAS;MAACiD,KAAK,EAAEC,MAAM,CAACG,KAAM;MAACC,WAAW,EAAC,SAAS;MAACC,KAAK,EAAE3B,OAAQ;MAAC4B,YAAY,EAAE3B;IAAW,CAAE,CAAC,EAClGpB,IAAA,CAACP,gBAAgB;MAAC+C,KAAK,EAAEC,MAAM,CAACO,WAAY;MAACC,OAAO,EAAExB,SAAU;MAAAkB,QAAA,EAC9D3C,IAAA,CAACN,IAAI;QAAC8C,KAAK,EAAEC,MAAM,CAACS,eAAgB;QAAAP,QAAA,EAAC;MAAsB,CAAM;IAAC,CAClD,CAAC,EAClBpB,KAAK,IACJvB,IAAA,CAACL,KAAK;MAACwD,MAAM,EAAE;QAAEC,GAAG,EAAG,yBAAwB7B,KAAM;MAAE,CAAE;MAACiB,KAAK,EAAEC,MAAM,CAACY;IAAa,CAAE,CACxF,EACDrD,IAAA,CAACP,gBAAgB;MAAC+C,KAAK,EAAEC,MAAM,CAACa,UAAW;MAACL,OAAO,EAAEV,YAAa;MAAAI,QAAA,EAChE3C,IAAA,CAACN,IAAI;QAAAiD,QAAA,EAAC;MAAO,CAAM;IAAC,CACJ,CAAC;EAAA,CACf,CAAC;AAEX,CAAC;AAED,IAAMF,MAAM,GAAGjD,UAAU,CAAC+D,MAAM,CAAC;EAC/Bb,SAAS,EAAE;IACTc,eAAe,EAAE,OAAO;IACxBC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE;EAChB,CAAC;EACDd,KAAK,EAAE;IACLe,WAAW,EAAE,CAAC;IACdC,WAAW,EAAE,MAAM;IACnBF,YAAY,EAAE,CAAC;IACfD,OAAO,EAAE,EAAE;IACXI,YAAY,EAAE;EAChB,CAAC;EACDb,WAAW,EAAE;IACXQ,eAAe,EAAE,WAAW;IAC5BC,OAAO,EAAE,EAAE;IACXC,YAAY,EAAE,CAAC;IACfI,UAAU,EAAE;EACd,CAAC;EACDZ,eAAe,EAAE;IACfa,KAAK,EAAE;EACT,CAAC;EACDV,YAAY,EAAE;IACZW,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,SAAS,EAAE,EAAE;IACbR,YAAY,EAAE;EAChB,CAAC;EACDJ,UAAU,EAAE;IACVE,eAAe,EAAE,QAAQ;IACzBE,YAAY,EAAE,CAAC;IACfD,OAAO,EAAE,EAAE;IACXK,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAelE,OAAO,CAAC,CAAC,CAACO,aAAa,CAAC;AAACgE,qBAAA,CAAAZ,MAAA;EAAAd,MAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;EAAA;EAAA2B,OAAA;IAAA;EAAA;EAAAC,MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}