{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { NativeWindStyleSheet as _NativeWindStyleSheet } from \"nativewind\";\nimport React, { useState, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport axios from \"axios\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var RegisterDoctor = function RegisterDoctor() {\n  var _ref;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    image = _useState2[0],\n    setImage = _useState2[1];\n  var pickImage = function pickImage() {\n    return (_ref = _ref || _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.All,\n        allowsEditing: true,\n        aspect: [4, 3],\n        quality: 1\n      });\n      console.log(result);\n      if (!result.canceled) {\n        setImage(result.assets[0].uri);\n      }\n    })).apply(this, arguments);\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: [_jsx(Button, {\n      title: \"Pick an image from camera roll\",\n      onPress: pickImage\n    }), image && _jsx(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200\n      }\n    })]\n  });\n};\n_NativeWindStyleSheet.create({\n  styles: {\n    \"flex\": {\n      \"display\": \"flex\"\n    }\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","Text","View","TextInput","TouchableOpacity","Alert","Picker","Image","Button","axios","ImagePicker","jsx","_jsx","jsxs","_jsxs","RegisterDoctor","_ref","_useState","_useState2","_slicedToArray","image","setImage","pickImage","_asyncToGenerator","result","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","console","log","canceled","assets","uri","apply","arguments","style","flex","alignItems","justifyContent","children","title","onPress","source","width","height","_NativeWindStyleSheet","create","styles"],"sources":["C:/Users/Fabiola/Desktop/projet/front/components/Authentification/Inscription/InscriptionDoctor.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  Alert,\r\n  Picker,\r\n  Image,\r\n  Button\r\n} from \"react-native\";\r\nimport axios from \"axios\";\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\n\r\nexport const RegisterDoctor = () => {\r\n//   const [name, setName] = useState(\"\");\r\n//   const [firstname, setFirstname] = useState(\"\");\r\n//   const [contact, setContact] = useState(\"\");\r\n//   const [speciality, setSpeciality] = useState(\"\");\r\n//   const [experience, setExperience] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [selectedRole, setSelectedRole] = useState(\"\");\r\n//   const [roles, setRoles] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     // Fetch roles from your backend when the component mounts\r\n//     axios\r\n//       .get(\"http://127.0.0.1:3000/role/getRole\")\r\n//       .then((response) => {\r\n//         setRoles(response.data);\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(error);\r\n//       });\r\n//   }, []);\r\n\r\n// const [photo, setPhoto] = useState(null);\r\n\r\n// const pickImage = async () => {\r\n//     // No permissions request is necessary for launching the image library\r\n//     let result = await ImagePicker.launchImageLibraryAsync({\r\n//       mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n//       allowsEditing: true,\r\n//       aspect: [4, 3],\r\n//       quality: 1,\r\n//       base64:false\r\n//     });\r\n\r\n//     console.log(result);\r\n\r\n//     if (!result.canceled) {\r\n//         setPhoto(result.assets[0].uri);\r\n//     }\r\n//   };\r\n\r\n\r\n//  const handleSubmit = () => {\r\n//   if (!name || !firstname || !contact || !speciality || !experience || !email || !password || !selectedRole) {\r\n//     Alert.alert(\"Error\", \"Please fill in all fields\");\r\n//     return;\r\n//   }\r\n\r\n\r\n//       // Prepare the data to be sent to the server for registration\r\n//       const formData = new FormData();\r\n//       formData.append(\"name\", name);\r\n//       formData.append(\"firstname\", firstname);\r\n//       formData.append(\"contact\", contact);\r\n//       formData.append(\"speciality\", speciality);\r\n//       formData.append(\"experience\", experience);\r\n//       formData.append(\"email\", email);\r\n//       formData.append(\"password\", password);\r\n//       formData.append(\"Role\", selectedRole);\r\n//       formData.append(\"photo\", {\r\n//         uri: photo,\r\n//         name: \"photo.jpg\",\r\n//         type: \"image/jpeg\", // Adjust the content type based on your image type\r\n//       }); \r\n\r\n//       console.log(formData);\r\n\r\n//       axios.post(\"http://127.0.0.1:3000/doctor/inscriptionDoctor\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//         },\r\n//       })\r\n//       .then((response) => {\r\n//         console.log(response.data);\r\n//         Alert.alert(\"Success\", \"Registration successful\");\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error(error);\r\n//         Alert.alert(\"Error\", \"Registration failed\");\r\n//       });\r\n// };\r\n//   return (\r\n//     <View style={{ flex: 1, backgroundColor: \"white\", paddingHorizontal: 20, paddingTop: 20 }}>\r\n//       <Text style={{ fontSize: 30 }}>Sign Up</Text>\r\n//       <View style={{ marginTop: 20 }}>\r\n//         <Text>Photo:</Text>\r\n//         {photo && (\r\n//           <Image\r\n//             source={{ uri: photo }}\r\n//             style={{ width: 100, height: 100 }}\r\n//           />\r\n//         )}\r\n//         <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n        \r\n//         {/* Rest of your form */}\r\n        \r\n\r\n//         <Text>Nom :</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"raharimanana\"\r\n//           onChangeText={(text) => setName(text)}\r\n//         />\r\n//         <Text>Prénoms :</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"fabiola\"\r\n//           onChangeText={(text) => setFirstname(text)}\r\n//         />\r\n//         <Text>Contact:</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"contact\"\r\n//           onChangeText={(text) => setContact(text)}\r\n//         />\r\n//         <Text>Speciality:</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"specialité\"\r\n//           onChangeText={(text) => setSpeciality(text)}\r\n//         />\r\n//         <Text>Experience:</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"experience\"\r\n//           onChangeText={(text) => setExperience(text)}\r\n//         />\r\n//         <Text>Email Address:</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           placeholder=\"email\"\r\n//           onChangeText={(text) => setEmail(text)}\r\n//         />\r\n//         <Text>Password:</Text>\r\n//         <TextInput\r\n//           style={{ padding: 10, backgroundColor: \"lightgray\", borderRadius: 10, marginBottom: 10 }}\r\n//           secureTextEntry\r\n//           placeholder=\"mot de passe\"\r\n//           onChangeText={(text) => setPassword(text)}\r\n//         />\r\n\r\n//         <Text>Role:</Text>\r\n//         <Picker\r\n//           style={{\r\n//             padding: 10,\r\n//             backgroundColor: \"lightgray\",\r\n//             borderRadius: 10,\r\n//             marginBottom: 10,\r\n//           }}\r\n//           selectedValue={selectedRole}\r\n//           onValueChange={(itemValue, itemIndex) => setSelectedRole(itemValue)}\r\n//         >\r\n//           <Picker.Item label=\"Select a Role\" value=\"\" />\r\n//           {roles.map((role) => (\r\n//             <Picker.Item\r\n//               key={role._id}\r\n//               label={role.RoleTitle}\r\n//               value={role._id}\r\n//             />\r\n//           ))}\r\n//         </Picker>\r\n\r\n//         <TouchableOpacity\r\n//           style={{ backgroundColor: \"blue\", borderRadius: 20, padding: 15, alignItems: \"center\" }}\r\n//           onPress={handleSubmit}\r\n//         >\r\n//           <Text style={{ color: \"white\", fontWeight: \"bold\", fontSize: 20 }}>Sign Up</Text>\r\n//         </TouchableOpacity>\r\n//       </View>\r\n//     </View>\r\n//   );\r\n\r\nconst [image, setImage] = useState(null);\r\n\r\n  const pickImage = async () => {\r\n    // No permissions request is necessary for launching the image library\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (!result.canceled) {\r\n      setImage(result.assets[0].uri);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n      <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\r\n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\r\n    </View>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,MAAA;AAWnD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGjD,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAAA,IAAAC,IAAA;EA6KpC,IAAAC,SAAA,GAA0BlB,QAAQ,CAAC,IAAI,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAEpB,IAAMI,SAAS,YAATA,SAASA,CAAA;IAAA,QAAAN,IAAA,GAAAA,IAAA,IAAAO,iBAAA,CAAG,aAAY;MAE5B,IAAIC,MAAM,SAASd,WAAW,CAACe,uBAAuB,CAAC;QACrDC,UAAU,EAAEhB,WAAW,CAACiB,gBAAgB,CAACC,GAAG;QAC5CC,aAAa,EAAE,IAAI;QACnBC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QACdC,OAAO,EAAE;MACX,CAAC,CAAC;MAEFC,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;MAEnB,IAAI,CAACA,MAAM,CAACU,QAAQ,EAAE;QACpBb,QAAQ,CAACG,MAAM,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC;MAChC;IACF,CAAC,GAAAC,KAAA,OAAAC,SAAA;EAAA;EAED,OACExB,KAAA,CAACZ,IAAI;IAACqC,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,UAAU,EAAE,QAAQ;MAAEC,cAAc,EAAE;IAAS,CAAE;IAAAC,QAAA,GACvE/B,IAAA,CAACJ,MAAM;MAACoC,KAAK,EAAC,gCAAgC;MAACC,OAAO,EAAEvB;IAAU,CAAE,CAAC,EACpEF,KAAK,IAAIR,IAAA,CAACL,KAAK;MAACuC,MAAM,EAAE;QAAEV,GAAG,EAAEhB;MAAM,CAAE;MAACmB,KAAK,EAAE;QAAEQ,KAAK,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAI;IAAE,CAAE,CAAC;EAAA,CAC3E,CAAC;AAEX,CAAC;AAACC,qBAAA,CAAAC,MAAA;EAAAC,MAAA;IAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}