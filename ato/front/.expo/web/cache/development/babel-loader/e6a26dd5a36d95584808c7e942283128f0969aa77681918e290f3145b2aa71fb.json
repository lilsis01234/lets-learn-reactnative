{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport { ResizeMode } from \"./Video.types\";\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\nvar Video = function (_React$Component) {\n  _inherits(Video, _React$Component);\n  var _super = _createSuper(Video);\n  function Video(props) {\n    var _ref, _ref2, _ref6, _ref8;\n    var _this;\n    _classCallCheck(this, Video);\n    _this = _super.call(this, props);\n    _this._nativeRef = React.createRef();\n    _this._onPlaybackStatusUpdate = null;\n    _this._handleNewStatus = function (status) {\n      if (_this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        _this.setState({\n          showPoster: false\n        });\n      }\n      if (_this.props.onPlaybackStatusUpdate) {\n        _this.props.onPlaybackStatusUpdate(status);\n      }\n      if (_this._onPlaybackStatusUpdate) {\n        _this._onPlaybackStatusUpdate(status);\n      }\n    };\n    _this._performOperationAndHandleStatusAsync = function (_x) {\n      return (_ref = _ref || _asyncToGenerator(function* (operation) {\n        var video = _this._nativeRef.current;\n        if (!video) {\n          throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n        }\n        var handle = findNodeHandle(_this._nativeRef.current);\n        var status = yield operation(handle);\n        _this._handleNewStatus(status);\n        return status;\n      })).apply(this, arguments);\n    };\n    _this._setFullscreen = function (_x2) {\n      return (_ref2 = _ref2 || _asyncToGenerator(function* (value) {\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return ExpoVideoViewManager.setFullscreen(tag, value);\n        });\n      })).apply(this, arguments);\n    };\n    _this.presentFullscreenPlayer = _asyncToGenerator(function* () {\n      return _this._setFullscreen(true);\n    });\n    _this.dismissFullscreenPlayer = _asyncToGenerator(function* () {\n      return _this._setFullscreen(false);\n    });\n    _this.getStatusAsync = _asyncToGenerator(function* () {\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return ExponentAV.getStatusForVideo(tag);\n      });\n    });\n    _this.loadAsync = function (_x3) {\n      return (_ref6 = _ref6 || _asyncToGenerator(function* (source) {\n        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var _yield$getNativeSourc = yield getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst),\n          nativeSource = _yield$getNativeSourc.nativeSource,\n          fullInitialStatus = _yield$getNativeSourc.fullInitialStatus;\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus);\n        });\n      })).apply(this, arguments);\n    };\n    _this.unloadAsync = _asyncToGenerator(function* () {\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return ExponentAV.unloadForVideo(tag);\n      });\n    });\n    _this.setStatusAsync = function (_x4) {\n      return (_ref8 = _ref8 || _asyncToGenerator(function* (status) {\n        assertStatusValuesInBounds(status);\n        return _this._performOperationAndHandleStatusAsync(function (tag) {\n          return ExponentAV.setStatusForVideo(tag, status);\n        });\n      })).apply(this, arguments);\n    };\n    _this.replayAsync = _asyncToGenerator(function* () {\n      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return _this._performOperationAndHandleStatusAsync(function (tag) {\n        return ExponentAV.replayVideo(tag, _objectSpread(_objectSpread({}, status), {}, {\n          positionMillis: 0,\n          shouldPlay: true\n        }));\n      });\n    });\n    _this._nativeOnPlaybackStatusUpdate = function (event) {\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnLoadStart = function () {\n      if (_this.props.onLoadStart) {\n        _this.props.onLoadStart();\n      }\n    };\n    _this._nativeOnLoad = function (event) {\n      if (_this.props.onLoad) {\n        _this.props.onLoad(event.nativeEvent);\n      }\n      _this._handleNewStatus(event.nativeEvent);\n    };\n    _this._nativeOnError = function (event) {\n      var error = event.nativeEvent.error;\n      if (_this.props.onError) {\n        _this.props.onError(error);\n      }\n      _this._handleNewStatus(getUnloadedStatus(error));\n    };\n    _this._nativeOnReadyForDisplay = function (event) {\n      if (_this.props.onReadyForDisplay) {\n        _this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    _this._nativeOnFullscreenUpdate = function (event) {\n      if (_this.props.onFullscreenUpdate) {\n        _this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    _this._renderPoster = function () {\n      var _this$props$PosterCom;\n      var PosterComponent = (_this$props$PosterCom = _this.props.PosterComponent) != null ? _this$props$PosterCom : Image;\n      return _this.props.usePoster && _this.state.showPoster ? React.createElement(PosterComponent, {\n        style: [_STYLES.poster, _this.props.posterStyle],\n        source: _this.props.posterSource\n      }) : null;\n    };\n    _this.state = {\n      showPoster: !!props.usePoster\n    };\n    return _this;\n  }\n  _createClass(Video, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(nativeProps) {\n      var nativeVideo = this._nativeRef.current;\n      if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n      nativeVideo.setNativeProps(nativeProps);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unloadAsync().catch(function () {});\n    }\n  }, {\n    key: \"setOnPlaybackStatusUpdate\",\n    value: function setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n      this.getStatusAsync();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var source = getNativeSourceFromSource(this.props.source) || undefined;\n      var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n      if (this.props.resizeMode) {\n        var resizeMode = this.props.resizeMode;\n        if (resizeMode === ResizeMode.STRETCH) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n        } else if (resizeMode === ResizeMode.CONTAIN) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n        } else if (resizeMode === ResizeMode.COVER) {\n          nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n        }\n      }\n      var status = _objectSpread({}, this.props.status);\n      ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(function (prop) {\n        if (prop in _this2.props) {\n          status[prop] = _this2.props[prop];\n        }\n      });\n      var nativeProps = _objectSpread(_objectSpread({}, omit(this.props, ['source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', 'posterStyle'].concat(_toConsumableArray(Object.keys(status))))), {}, {\n        style: [_STYLES.base, this.props.style],\n        videoStyle: [_STYLES.video, this.props.videoStyle],\n        source: source,\n        resizeMode: nativeResizeMode,\n        status: status,\n        onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n        onLoadStart: this._nativeOnLoadStart,\n        onLoad: this._nativeOnLoad,\n        onError: this._nativeOnError,\n        onReadyForDisplay: this._nativeOnReadyForDisplay,\n        onFullscreenUpdate: this._nativeOnFullscreenUpdate\n      });\n      return React.createElement(View, {\n        style: nativeProps.style,\n        pointerEvents: \"box-none\"\n      }, React.createElement(ExponentVideo, _objectSpread(_objectSpread({\n        ref: this._nativeRef\n      }, nativeProps), {}, {\n        style: nativeProps.videoStyle\n      })), this._renderPoster());\n    }\n  }]);\n  return Video;\n}(React.Component);\nfunction omit(props, propNames) {\n  var copied = _objectSpread({}, props);\n  for (var propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\nObject.assign(Video.prototype, PlaybackMixin);\nexport default Video;","map":{"version":3,"names":["React","findNodeHandle","Image","StyleSheet","View","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExpoVideoManager","ExponentAV","ExponentVideo","ResizeMode","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","_React$Component","_inherits","_super","_createSuper","props","_ref","_ref2","_ref6","_ref8","_this","_classCallCheck","call","_nativeRef","createRef","_onPlaybackStatusUpdate","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_x","_asyncToGenerator","operation","current","Error","handle","apply","arguments","_setFullscreen","_x2","value","tag","setFullscreen","presentFullscreenPlayer","dismissFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","_x3","source","initialStatus","length","undefined","downloadFirst","_yield$getNativeSourc","nativeSource","fullInitialStatus","loadForVideo","unloadAsync","unloadForVideo","setStatusAsync","_x4","setStatusForVideo","replayAsync","replayVideo","_objectSpread","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onFullscreenUpdate","_renderPoster","_this$props$PosterCom","PosterComponent","usePoster","createElement","style","posterStyle","posterSource","_createClass","key","setNativeProps","nativeProps","nativeVideo","componentWillUnmount","catch","setOnPlaybackStatusUpdate","render","_this2","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","omit","concat","_toConsumableArray","Object","keys","videoStyle","onStatusUpdate","pointerEvents","ref","Component","propNames","copied","propName","assign","prototype"],"sources":["C:\\Users\\Fabiola\\Music\\desktop\\projet\\front\\node_modules\\expo-av\\src\\Video.tsx"],"sourcesContent":["import * as React from 'react';\nimport { findNodeHandle, Image, NativeMethods, StyleSheet, View } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  AVPlaybackSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  AVPlaybackTolerance,\n} from './AV';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport {\n  ExponentVideoComponent,\n  VideoFullscreenUpdateEvent,\n  VideoNativeProps,\n  VideoProps,\n  VideoReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nclass Video extends React.Component<VideoProps, VideoState> implements Playback {\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeMethods>();\n  _onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null = null;\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  setNativeProps(nativeProps: VideoNativeProps) {\n    const nativeVideo = this._nativeRef.current;\n    if (!nativeVideo) throw new Error(`native video reference is not defined.`);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: AVPlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n    if (this._onPlaybackStatusUpdate) {\n      this._onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<AVPlaybackStatus>\n  ): Promise<AVPlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: AVPlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // Fullscreening API\n\n  _setFullscreen = async (value: boolean): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  /**\n   * This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`,\n   * native controls will be visible in fullscreen mode.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  presentFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(true);\n  };\n\n  /**\n   * This dismisses the fullscreen video view.\n   * @return A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing,\n   * or rejects if there was an error, or if this was called on an Android device.\n   */\n  dismissFullscreenPlayer = async (): Promise<AVPlaybackStatus> => {\n    return this._setFullscreen(false);\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  /**\n   * @hidden\n   */\n  getStatusAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  loadAsync = async (\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<AVPlaybackStatus> => {\n    const { nativeSource, fullInitialStatus } =\n      await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  /**\n   * Equivalent to setting URI to `null`.\n   * @hidden\n   */\n  unloadAsync = async (): Promise<AVPlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  componentWillUnmount() {\n    // Auto unload video to perform necessary cleanup safely\n    this.unloadAsync().catch(() => {\n      // Ignored rejection. Sometimes the unloadAsync code is executed when video is already unloaded.\n      // In such cases, it throws:\n      // \"[Unhandled promise rejection: Error: Invalid view returned from registry,\n      //  expecting EXVideo, got: (null)]\"\n    });\n  }\n\n  /**\n   * Set status API, only available while `isLoaded = true`.\n   * @hidden\n   */\n  setStatusAsync = async (status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  /**\n   * @hidden\n   */\n  replayAsync = async (status: AVPlaybackStatusToSet = {}): Promise<AVPlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  /**\n   * Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.\n   *\n   * `onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes\n   * (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals\n   * while the media is in the loaded state.\n   *\n   * Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify\n   * the interval with which `onPlaybackStatusUpdate` is called while loaded.\n   *\n   * @param onPlaybackStatusUpdate A function taking a single parameter `AVPlaybackStatus`.\n   */\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: AVPlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<AVPlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  pauseAsync!: () => Promise<AVPlaybackStatus>;\n  stopAsync!: () => Promise<AVPlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: AVPlaybackTolerance\n  ) => Promise<AVPlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<AVPlaybackStatus>;\n  setVolumeAsync!: (volume: number, audioPan?: number) => Promise<AVPlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<AVPlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<AVPlaybackStatus>;\n\n  // Callback wrappers\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: AVPlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: AVPlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: VideoReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: VideoFullscreenUpdateEvent }) => {\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () => {\n    const PosterComponent = this.props.PosterComponent ?? Image;\n\n    return this.props.usePoster && this.state.showPoster ? (\n      <PosterComponent\n        style={[_STYLES.poster, this.props.posterStyle]}\n        source={this.props.posterSource!}\n      />\n    ) : null;\n  };\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      const resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: AVPlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach((prop) => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    const nativeProps: VideoNativeProps = {\n      ...omit(this.props, [\n        'source',\n        'onPlaybackStatusUpdate',\n        'usePoster',\n        'posterSource',\n        'posterStyle',\n        ...Object.keys(status),\n      ]),\n      style: [_STYLES.base, this.props.style],\n      videoStyle: [_STYLES.video, this.props.videoStyle],\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={nativeProps.videoStyle} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nfunction omit(props: Record<string, any>, propNames: string[]) {\n  const copied = { ...props };\n  for (const propName of propNames) {\n    delete copied[propName];\n  }\n  return copied;\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n\n// note(simek): TypeDoc cannot resolve correctly name of inline and default exported class\nexport default Video;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}