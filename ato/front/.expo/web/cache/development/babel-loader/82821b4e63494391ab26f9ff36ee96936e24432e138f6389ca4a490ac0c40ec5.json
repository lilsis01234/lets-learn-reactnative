{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useEffect, useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { RTCPeerConnection, RTCView, mediaDevices } from 'react-native-webrtc';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar CallScreen = function CallScreen(_ref) {\n  var _remoteStream$current;\n  var route = _ref.route;\n  var doctorId = route.params.doctorId;\n  var localStream = useRef(null);\n  var remoteStream = useRef(null);\n  var peerConnection = useRef(null);\n  useEffect(function () {\n    var _ref2, _ref3;\n    var startLocalStream = function startLocalStream() {\n      return (_ref2 = _ref2 || _asyncToGenerator(function* () {\n        var stream = yield mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        localStream.current = stream;\n      })).apply(this, arguments);\n    };\n    startLocalStream();\n    peerConnection.current = new RTCPeerConnection();\n    localStream.current.getTracks().forEach(function (track) {\n      peerConnection.current.addTrack(track, localStream.current);\n    });\n    peerConnection.current.onicecandidate = function (event) {\n      if (event.candidate) {}\n    };\n    peerConnection.current.ontrack = function (event) {\n      remoteStream.current = event.streams[0];\n    };\n    var startCall = function startCall() {\n      return (_ref3 = _ref3 || _asyncToGenerator(function* () {\n        var offer = yield peerConnection.current.createOffer();\n        yield peerConnection.current.setLocalDescription(offer);\n      })).apply(this, arguments);\n    };\n    startCall();\n  }, [doctorId]);\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"Appel vid\\xE9o avec le m\\xE9decin \", doctorId]\n    }), _jsx(View, {\n      children: _jsx(RTCView, {\n        style: {\n          width: 200,\n          height: 200\n        },\n        streamURL: (_remoteStream$current = remoteStream.current) == null ? void 0 : _remoteStream$current.toURL()\n      })\n    }), _jsx(Button, {\n      title: \"Terminer l'appel\",\n      onPress: function onPress() {}\n    })]\n  });\n};\nexport default CallScreen;","map":{"version":3,"names":["React","useEffect","useRef","View","Text","Button","RTCPeerConnection","RTCView","mediaDevices","jsxs","_jsxs","jsx","_jsx","CallScreen","_ref","_remoteStream$current","route","doctorId","params","localStream","remoteStream","peerConnection","_ref2","_ref3","startLocalStream","_asyncToGenerator","stream","getUserMedia","video","audio","current","apply","arguments","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","ontrack","streams","startCall","offer","createOffer","setLocalDescription","children","style","width","height","streamURL","toURL","title","onPress"],"sources":["C:/Users/Fabiola/Desktop/projet/front/components/VisioConference/VisioConference.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { View, Text, Button } from 'react-native';\r\nimport { RTCPeerConnection, RTCView, mediaDevices } from 'react-native-webrtc';\r\n\r\nconst CallScreen = ({ route }) => {\r\n  const { doctorId } = route.params;\r\n\r\n  const localStream = useRef(null);\r\n  const remoteStream = useRef(null);\r\n  const peerConnection = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Configurez et démarrez la capture vidéo locale\r\n    const startLocalStream = async () => {\r\n      const stream = await mediaDevices.getUserMedia({ video: true, audio: true });\r\n      localStream.current = stream;\r\n    };\r\n\r\n    startLocalStream();\r\n\r\n    // Configurez la connexion peer-to-peer\r\n    peerConnection.current = new RTCPeerConnection();\r\n\r\n    // Ajoutez la piste vidéo locale à la connexion\r\n    localStream.current.getTracks().forEach(track => {\r\n      peerConnection.current.addTrack(track, localStream.current);\r\n    });\r\n\r\n    // Configurez la gestion des événements de la connexion\r\n    peerConnection.current.onicecandidate = event => {\r\n      if (event.candidate) {\r\n        // Envoyez l'ICE candidate à l'autre participant\r\n      }\r\n    };\r\n\r\n    peerConnection.current.ontrack = event => {\r\n      // Recevez la piste vidéo à partir de l'autre participant\r\n      remoteStream.current = event.streams[0];\r\n    };\r\n\r\n    // Démarrez la négociation de l'offre et de la réponse\r\n    const startCall = async () => {\r\n      const offer = await peerConnection.current.createOffer();\r\n      await peerConnection.current.setLocalDescription(offer);\r\n\r\n      // Envoyez l'offre à l'autre participant et attendez la réponse\r\n      // Une fois que la réponse est reçue, définissez-la comme description distante\r\n      // pour établir la connexion\r\n    };\r\n\r\n    startCall();\r\n  }, [doctorId]);\r\n\r\n  return (\r\n    <View>\r\n      <Text>Appel vidéo avec le médecin {doctorId}</Text>\r\n      <View>\r\n        <RTCView style={{ width: 200, height: 200 }} streamURL={remoteStream.current?.toURL()} />\r\n      </View>\r\n      <Button title=\"Terminer l'appel\" onPress={() => { /* Terminer l'appel vidéo ici */ }} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default CallScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}